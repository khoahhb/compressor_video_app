package com.example.compress_video_app.activities;

import android.annotation.SuppressLint;
import android.app.PictureInPictureParams;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Color;
import android.media.AudioManager;
import android.media.MediaMetadataRetriever;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Rational;
import android.util.TypedValue;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.PopupMenu;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.bullhead.equalizer.EqualizerFragment;
import com.bullhead.equalizer.Settings;
import com.developer.filepicker.controller.DialogSelectionListener;
import com.developer.filepicker.model.DialogConfigs;
import com.developer.filepicker.model.DialogProperties;
import com.developer.filepicker.view.FilePickerDialog;
import com.example.compress_video_app.R;
import com.example.compress_video_app.adapters.PlaybackIconsAdapter;
import com.example.compress_video_app.adapters.VideoFilesAdapter;
import com.example.compress_video_app.models.BrightnessDialog;
import com.example.compress_video_app.models.IconModel;
import com.example.compress_video_app.models.MediaFiles;
import com.example.compress_video_app.models.OnSwipeTouchListener;
import com.example.compress_video_app.models.PlaylistDialog;
import com.example.compress_video_app.models.Utility;
import com.example.compress_video_app.models.VolumeDialog;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.ExoPlaybackException;
import com.google.android.exoplayer2.Format;
import com.google.android.exoplayer2.MediaItem;
import com.google.android.exoplayer2.PlaybackParameters;
import com.google.android.exoplayer2.Player;
import com.google.android.exoplayer2.SimpleExoPlayer;
import com.google.android.exoplayer2.source.ConcatenatingMediaSource;
import com.google.android.exoplayer2.source.MediaSource;
import com.google.android.exoplayer2.source.MergingMediaSource;
import com.google.android.exoplayer2.source.ProgressiveMediaSource;
import com.google.android.exoplayer2.source.SingleSampleMediaSource;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import com.google.android.exoplayer2.ui.PlayerView;
import com.google.android.exoplayer2.upstream.DefaultDataSourceFactory;
import com.google.android.exoplayer2.util.MimeTypes;
import com.google.android.exoplayer2.util.Util;

import java.io.File;
import java.util.ArrayList;

public class VideoPlayerActivity extends AppCompatActivity {

    ArrayList<MediaFiles> mVideoFiles = new ArrayList<>();
    PlayerView playerView;
    SimpleExoPlayer player;
    int position;
    ImageView scaling, videoList,exo_rotate,video_more;
    VideoFilesAdapter videoFilesAdapter;
    ConcatenatingMediaSource concatenatingMediaSource;
    boolean isCrossChecked;
    TextView total_duration;
    boolean singleTap = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_video_player);
        getSupportActionBar().hide();
        playerView = findViewById(R.id.exoplayer_view);
        position = getIntent().getIntExtra("position", 1);
        mVideoFiles = getIntent().getExtras().getParcelableArrayList("videoArrayList");

        initViews();
        playVideo();


        playerView.setOnTouchListener(new OnSwipeTouchListener(this) {
            @Override
            public boolean onTouch(View view, MotionEvent motionEvent) {
                switch (motionEvent.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        playerView.showController();
                        break;

                }
                return super.onTouch(view, motionEvent);
            }
            @Override
            public void onSingleTouch() {
                super.onSingleTouch();
                if (singleTap) {
                    playerView.showController();
                    singleTap = false;
                } else {
                    playerView.hideController();
                    singleTap = true;
                }
            }
        });

    }


    private void initViews() {
        total_duration = findViewById(R.id.exo_duration);
        scaling = findViewById(R.id.scaling);
        exo_rotate = findViewById(R.id.exo_rotate);
        videoList = findViewById(R.id.video_list);
        video_more = findViewById(R.id.video_more);

        videoList.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                PlaylistDialog playlistDialog = new PlaylistDialog(mVideoFiles, videoFilesAdapter);
                playlistDialog.show(getSupportFragmentManager(), playlistDialog.getTag());
            }
        });
        scaling.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                ViewGroup.LayoutParams layoutParams = playerView.getLayoutParams();
                if (layoutParams.height ==ViewGroup.LayoutParams.MATCH_PARENT  ){
                    int desiredHeightDp = 240;
                    int desiredHeightPx = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, desiredHeightDp, getResources().getDisplayMetrics());
                    layoutParams.height = desiredHeightPx;
                    playerView.setLayoutParams(layoutParams);
                }else {
                    layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
                    playerView.setLayoutParams(layoutParams);
                }
            }
        });
        exo_rotate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
                } else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
                }
            }
        });
        video_more.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                double milliSeconds = Double.parseDouble(mVideoFiles.get(position).getDuration());
                android.app.AlertDialog.Builder alertDialog = new android.app.AlertDialog.Builder(VideoPlayerActivity.this);
                alertDialog.setTitle("Properties");

                String one = "File: " + mVideoFiles.get(position).getDisplayName();

                String path = mVideoFiles.get(position).getPath();
                int indexOfPath = path.lastIndexOf("/");
                String two = "Path: " + path.substring(0, indexOfPath);

                String three = "Size: " + android.text.format.Formatter
                        .formatFileSize(VideoPlayerActivity.this, Long.parseLong(mVideoFiles.get(position).getSize()));

                String four = "Length: " + Utility.timeConversion((long) milliSeconds);

                String namewithFormat = mVideoFiles.get(position).getDisplayName();
                int index = namewithFormat.lastIndexOf(".");
                String format = namewithFormat.substring(index + 1);
                String five = "Format: " + format;

                MediaMetadataRetriever metadataRetriever = new MediaMetadataRetriever();
                metadataRetriever.setDataSource(mVideoFiles.get(position).getPath());
                String height = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT);
                String width = metadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH);
                String six = "Resolution: " + width + "x" + height;

                alertDialog.setMessage(one + "\n\n" + two + "\n\n" + three + "\n\n" + four +
                        "\n\n" + five + "\n\n" + six);
                alertDialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                alertDialog.show();
            }
        });
        double milliseconds = Double.parseDouble(mVideoFiles.get(position).getDuration());
        total_duration.setText(Utility.timeConversion((long) milliseconds));
    }

    private void playVideo() {

        Uri uri = Uri.parse(mVideoFiles.get(position).getPath());

        DefaultDataSourceFactory dataSourceFactory = new DefaultDataSourceFactory(
                this, Util.getUserAgent(this, "app"));
        concatenatingMediaSource = new ConcatenatingMediaSource();
        for (int i = 0; i < mVideoFiles.size(); i++) {
            new File(String.valueOf(mVideoFiles.get(i)));
            MediaItem mediaItem = MediaItem.fromUri(uri);
            MediaSource mediaSource = new ProgressiveMediaSource.Factory(dataSourceFactory)
                    .createMediaSource(mediaItem);
            concatenatingMediaSource.addMediaSource(mediaSource);
        }

        player = new SimpleExoPlayer.Builder(this).build();
        player.prepare(concatenatingMediaSource);
//        player.seekTo(position, C.TIME_UNSET);

        playerView.setPlayer(player);
        playerView.setKeepScreenOn(true);

        playError();


    }

    private void playError() {
        player.addListener(new Player.EventListener() {
            @Override
            public void onPlayerError(ExoPlaybackException error) {
                Toast.makeText(VideoPlayerActivity.this, "Video Playing Error", Toast.LENGTH_SHORT).show();
            }
        });
        player.setPlayWhenReady(true);
    }

    @Override
    public void onBackPressed() {
        if (player != null) {
            player.release();
        }
        super.onBackPressed();

    }

    @Override
    protected void onPause() {
        super.onPause();
        player.setPlayWhenReady(false);
        player.getPlaybackState();
        if (isInPictureInPictureMode()) {
            player.setPlayWhenReady(true);
        } else {
            player.setPlayWhenReady(false);
            player.getPlaybackState();
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        player.setPlayWhenReady(true);
        player.getPlaybackState();
    }

    @Override
    protected void onRestart() {
        super.onRestart();
        player.setPlayWhenReady(true);
        player.getPlaybackState();
    }

    private void setFullScreen() {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }



    @Override
    public void onPictureInPictureModeChanged(boolean isInPictureInPictureMode, Configuration newConfig) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            super.onPictureInPictureModeChanged(isInPictureInPictureMode, newConfig);
        }
        isCrossChecked = isInPictureInPictureMode;
        if (isInPictureInPictureMode) {
            playerView.hideController();
        } else {
            playerView.showController();
        }
    }

    @Override
    protected void onStop() {
        super.onStop();
        if (isCrossChecked) {
            player.release();
            finish();
        }
    }

}