package com.example.compress_video_app.activities;

import android.Manifest;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.provider.MediaStore;
import android.util.Log;
import android.view.View;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.MediaController;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.VideoView;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AppCompatActivity;

import com.example.compress_video_app.R;
import com.example.compress_video_app.compressor.HandleVideo;
import com.example.compress_video_app.compressor.VideoCompressor;
import com.example.compress_video_app.models.MediaFiles;
import com.google.android.material.textfield.TextInputLayout;

import java.io.File;

public class CompressActivity extends AppCompatActivity {

    private static final int REQUEST_PERMISSION_CODE = 1;
    private static final String TAG = "CompressActivity";

    private MediaFiles mOriginVideo;

    //UI
    private VideoView playerViewOrigin;
    private VideoView playerViewCompress;
    private TextView tvOriginFileName;
    private TextView tvOriginSize;
    private TextView tvOriginResolution;
    private TextView tvOriginDuration;
    private TextView tvOriginFileFormat;
    private TextView tvOriginCodec;
    private TextView tvOriginBitrate;
    private TextView tvOriginFrameRate;
    private TextView tvCompressFileName;
    private TextView tvCompressSize;
    private TextView tvCompressResolution;
    private TextView tvCompressDuration;
    private TextView tvCompressFileFormat;
    private TextView tvCompressCodec;
    private TextView tvCompressBitrate;
    private TextView tvCompressFrameRate;
    private TextInputLayout tilCodec;
    private AutoCompleteTextView tieCodec;
    private Button btnUpVideo;
    private Button btnCompress;
    private ProgressBar pbIsCompressed;
    private Uri videoUri;
    private final ActivityResultLauncher<Intent> selectVideo = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(),
            result -> {
                if (result.getResultCode() == RESULT_OK) {
                    if (result.getData() != null) {
                        videoUri = result.getData().getData();
                        try {
                            getDataInput(videoUri);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
    );


    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        switch (requestCode) {
            case REQUEST_PERMISSION_CODE:
                if (grantResults.length > 0 &&
                        grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    uploadVideo();
                }
        }
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_compress);
        getSupportActionBar().hide();
        initUI();
        setListeners();
    }

    private void initUI() {
        playerViewOrigin = findViewById(R.id.playerViewOrigin);
        playerViewCompress = findViewById(R.id.playerViewCompress);
        MediaController mediaController = new MediaController(this);
        MediaController mediaController2 = new MediaController(this);
        playerViewOrigin.setMediaController(mediaController);
        playerViewCompress.setMediaController(mediaController2);
        mediaController.setAnchorView(playerViewOrigin);
        mediaController2.setAnchorView(playerViewCompress);
        tilCodec = findViewById(R.id.tilCodec);
        tieCodec = findViewById(R.id.tieCodec);
//        tvOriginFileName = findViewById(R.id.tvOriginFileName);
//        tvOriginSize = findViewById(R.id.tvOriginSize);
//        tvOriginResolution = findViewById(R.id.tvOriginResolution);
//        tvOriginDuration = findViewById(R.id.tvOriginDuration);
//        tvOriginFileFormat = findViewById(R.id.tvOriginFileFormat);
//        tvOriginCodec = findViewById(R.id.tvOriginCodec);
//        tvOriginBitrate = findViewById(R.id.tvOriginBitrate);
//        tvOriginFrameRate = findViewById(R.id.tvOriginFrameRate);
//        tvCompressFileName = findViewById(R.id.tvCompressFileName);
//        tvCompressSize = findViewById(R.id.tvCompressSize);
//        tvCompressResolution = findViewById(R.id.tvCompressResolution);
//        tvCompressDuration = findViewById(R.id.tvCompressDuration);
//        tvCompressFileFormat = findViewById(R.id.tvCompressFileFormat);
//        tvCompressCodec = findViewById(R.id.tvCompressCodec);
//        tvCompressBitrate = findViewById(R.id.tvCompressBitrate);
//        tvCompressFrameRate = findViewById(R.id.tvCompressFrameRate);
        btnUpVideo = findViewById(R.id.btnUpVideo);
        btnCompress = findViewById(R.id.btnCompress);
        pbIsCompressed = findViewById(R.id.pbIsCompressed);
    }

    private void setListeners() {
        btnUpVideo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                    if (checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
                        requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_MEDIA_VIDEO, Manifest.permission.MANAGE_EXTERNAL_STORAGE}, REQUEST_PERMISSION_CODE);
                    } else {
                        uploadVideo();
                    }
                }
            }
        });

        btnCompress.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String inputPath;
                inputPath = getRealPathFromURI(CompressActivity.this, videoUri);
                compressVideo(inputPath);
            }
        });
    }

    public void uploadVideo() {
        Intent intent = new Intent(Intent.ACTION_PICK);
        intent.setType("video/*");
        selectVideo.launch(intent);
    }

    private void getDataInput(Uri uri) {

        String realPath = getRealPathFromURI(this, uri);

        File realFile = new File(realPath);

        HandleVideo video = new HandleVideo(Uri.fromFile(realFile));

        playerViewOrigin.setVideoURI(uri);
        playerViewOrigin.start();

        tvOriginFileName.setText("File: " + video.getFormatFileName());
        tvOriginSize.setText("Size: " + video.getFormatSize(this));
        tvOriginResolution.setText("Resolution: " + video.getFormatResolution());
        tvOriginDuration.setText("Duration: " + video.getFormatDuration());
        tvOriginFileFormat.setText("Format: " + video.getFormat());
        tvOriginCodec.setText("Codec: " + video.getFormatCodec());
        tvOriginBitrate.setText("Bitrate: " + video.getFormatBitrate());
        tvOriginFrameRate.setText("Frame rate: " + video.getFormatFrameRate());
    }

    private void getDataOutput(Uri uri) {

        HandleVideo video = new HandleVideo(uri);

        playerViewCompress.setVideoURI(uri);
        playerViewCompress.start();

        tvCompressFileName.setText("File: " + video.getFormatFileName());
        tvCompressSize.setText("Size: " + video.getFormatSize(this));
        tvCompressResolution.setText("Resolution: " + video.getFormatResolution());
        tvCompressDuration.setText("Duration: " + video.getFormatDuration());
        tvCompressFileFormat.setText("Format: " + video.getFormat());
        tvCompressCodec.setText("Codec: " + video.getFormatCodec());
        tvCompressBitrate.setText("Bitrate: " + video.getFormatBitrate());
        tvCompressFrameRate.setText("Frame rate: " + video.getFormatFrameRate());
    }

    private void compressVideo(String inputPath) {
        pbIsCompressed.setVisibility(View.VISIBLE);
        playerViewCompress.setVisibility(View.GONE);
        File inputFile = new File(inputPath);

        try {
            VideoCompressor compressor = new VideoCompressor(this, new VideoCompressor.CompressListener() {
                @Override
                public void onStart() {

                }

                @Override
                public void onSuccess(Uri uri) {
                    Handler mainHandler = new Handler(Looper.getMainLooper());
                    Runnable myRunnable = () -> {
                        pbIsCompressed.setVisibility(View.GONE);
                        playerViewCompress.setVisibility(View.VISIBLE);
                        getDataOutput(uri);
                    };
                    mainHandler.post(myRunnable);
                }

                @Override
                public void onFail() {

                }

                @Override
                public void onProgress(float percent) {

                }
            });
            compressor.setInput(new HandleVideo(Uri.fromFile(inputFile)));
            compressor.setProfileH264High();
            compressor.start();

        } catch (Throwable e) {
            Log.e(TAG, "Problem: " + e);
            e.printStackTrace();
        }
    }

    public String getRealPathFromURI(Context context, Uri contentUri) {
        Cursor cursor = null;
        try {
            String[] proj = {MediaStore.Video.Media.DATA};
            cursor = context.getContentResolver().query(contentUri, proj, null, null, null);
            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }
}